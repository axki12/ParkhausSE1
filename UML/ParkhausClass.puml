/**
*Author: Joshua BÃ¤uml
*/

@startuml
left to right direction

class ConfigServlet{
    #doPost(request: HttpServletRequest, response: HttpServletResponse): void
}

class SimulationServlet{
    #doPost(request: HttpServletRequest, response: HttpServletResponse): void
    #doGet(request: HttpServletRequest, response: HttpServletResponse): void
}

interface VehicleIF{
    getLicensePlate(): String
    getType(): CustomerType
    getTicket(): Ticket
}

class Bike{

    t: Ticket
    type: CustomerType
    licensePlate: String

    +Bike(x: CustomerType, lp: String)
    +getLicensePlate(): String
    +getType(): CustomerType
    +getTicket(): Ticket
}


class Car{
        t: Ticket
        type: CustomerType
        licensePlate: String

        +Bike(x: CustomerType, lp: String)
        +getLicensePlate(): String
        +getType(): CustomerType
        +getTicket(): Ticket
}

class CarPark{
    -name: String
    -park: ParkingLot[]
    -price: double
    -freeCarSpaces: int
    -freeLocalSpaces: int
    -freeDisabledSpaces: int
    -freeWomanSpaces: int
    -freeBikeSpaces: int
    +cfg: Config

    +CarPark(c: Config)
    +createVehicle(lp: String, x: CustomerType): VehicleIF
    +createRandomVehicle(): VehicleIF
    +enter(): void
    +enter(v: VehicleIF): void
    +enterVehicle(v: VehicleIF): void
    +leave(v: int): void
    +leaveRandom(): VehicleIF
    +getFreeCarSpaces(): int
    +getFreeLocalSpaces(): int
    +getFreeDisabledSpaces(): int
    +getFreeWomanSpaces(): int
    +getFreeBikeSpaces(): int
    +getPrice(): double
    +getParkinglots(): int
    +toString(): String
    +getFreeSpaces(): int

}

class ParkingLot{
    vehicle: VehicleIF
    type: CustomerType

    +Parkinglot(c: CustomerType)
    +isEmpty(): boolean
    +removeVehicle(): VehicleIF
    +addVehicle(v: VehicleIF): void
}


class Config{
    -name: String
    -totalLots: int
    -womenLots: int
    -disabledLots: int
    -localLots: int
    -bikeLots: int
    -price: double

    +Config()
    +Config(config: JsonObject)
    +validateConfig(config: JsonObject): boolean
    +getValue(type: String): int
    +getName(): String
    +getPrice(): double
    +toString(): String
}

class Ticket{
    entrance: Date
    exit: Date
    +licensePlat: String
    -isPaid: boolean
    -ticketID: int
    numberOfTickets: int
    -price: double

    +Ticket(lp: String)
    +isPaid(): boolean
    +payTicket(p: double): void
    +getTicketID(): int
    +getEntranceDate(): Date
    +getExitDate(): Date
    +getPrice(): double

}

enum CustomerType{
    Car
    BIKE
    DISABLED
    WOMEN
    LOCAL
}

class requestUtilities{
    {static}+getRequestParams(req: HttpServletRequest): void
    {static}+getContextParams(req: HttpServletRequest): void
    {static}+setCOntextParam(req: HttpServletRequest): void
    {static}+createJson(req: HttpServletRequest): JsonObject
    {static}+checkAttributes(req: HttpServletRequest): boolean
}

class responseUtilities{
    {static}+createVehicleAsJson(v: VehicleIF): JsonObject
}

class CarParkTest <<JUnit>>{
    ph: CarPark
    car: VehicleIF

    init(): void
    checkNumberOfParkspaces_AssertTrue(): void
    createRandomVehicle(): void
    enter(): void
    leave(): void


}

class VehicleIFTest <<JUnit>>{
    bike: VehicleIF

    init(): void
    getLicensePlate(): void
    getType(): void
    getTicket(): void
}

class ServletException
class IOException
class IllegalArgumentException
class HttpServlet


ConfigServlet .. ServletException : throws
ConfigServlet .. IOException : throws
ConfigServlet -|> HttpServlet : <<extends>>

SimulationServlet .. ServletException: throws
SimulationServlet .. IOException: throws
SimulationServlet -|> HttpServlet: <<extends>

requestUtilities .. IOException: throws

Config .. IllegalArgumentException: throws

Bike ..|> VehicleIF
Car ..|> VehicleIF

CarPark +-- ParkingLot

VehicleIF .. VehicleIFTest: tests
CarPark .. CarParkTest: tests


@enduml